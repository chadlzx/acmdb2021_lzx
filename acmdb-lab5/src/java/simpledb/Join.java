package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;


	private JoinPredicate p;
	private DbIterator child1,child2;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p=p;
        this.child1=child1;
        this.child2=child2;
        
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }
	
	private Tuple fetched_child1=null,fetched_child2=null;//the fetched from child1
	
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child1.open();
        child2.open();
        
        if(child1.hasNext()) fetched_child1 = child1.next();
        else fetched_child1 = null;
        
        fetched_child2 = null;
        
        
    }

    public void close() {
        // some code goes here
        child1.close();
        child2.close();
        super.close();
        fetched_child1=null;
        fetched_child2=null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if(fetched_child1 == null)return null;
		
		
		
		do{
            if (child2.hasNext())
                fetched_child2=child2.next();
            else {
                if(child1.hasNext()){
                    fetched_child1 = child1.next();
                    child2.rewind();
                    if (child2.hasNext())
                        fetched_child2 = child2.next();
                } 
                else fetched_child1 = null;
            }
        }while(fetched_child1 != null && fetched_child2 != null && !(fetched_child1.getField(p.getField1()).compare(p.getOperator(), fetched_child2.getField(p.getField2()))));
        
		
		
        if(fetched_child1 != null && fetched_child2 != null) {
            Tuple nextTuple = new Tuple(TupleDesc.merge(fetched_child1.getTupleDesc(), fetched_child2.getTupleDesc()));
            for(int i = 0; i < fetched_child1.getTupleDesc().numFields(); i++) 
                nextTuple.setField(i,fetched_child1.getField(i));
            for(int i = 0; i < fetched_child2.getTupleDesc().numFields(); i++) 
                nextTuple.setField(i+fetched_child1.getTupleDesc().numFields(), fetched_child2.getField(i));
            return nextTuple;
        }
		else return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[]{child1,child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
