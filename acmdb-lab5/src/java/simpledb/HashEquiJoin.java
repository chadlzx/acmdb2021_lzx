package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
	private JoinPredicate p;
    private DbIterator child1, child2;
	private Tuple fetched_child1=null;
	
	
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
		return child1.getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }
    
    private HashMap<Object, ArrayList<Tuple>> map = new HashMap<>();
    
    private void getHashMap()throws DbException, TransactionAbortedException{
        map.clear();
        while (child2.hasNext()) {
            Tuple t=child2.next();
            ArrayList<Tuple> list = map.computeIfAbsent(t.getField(p.getField2()), k -> new ArrayList<Tuple>());
            list.add(t);
        }
    }
    
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child1.open();
        child2.open();
        getHashMap();
    }

    public void close() {
        // some code goes here
        super.close();
        child2.close();
        child1.close();
        fetched_child1=null;
        listIt=null;
        map.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        close();
        open();
    }

    transient Iterator<Tuple> listIt = null;

   	private Tuple CombineTuple(){
   		Tuple fetched_child2 = listIt.next();
   		
        int td1n=fetched_child1.getTupleDesc().numFields();
        int td2n=fetched_child2.getTupleDesc().numFields();
        
        Tuple t = new Tuple(TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc()));
        for (int i = 0; i < td1n; i++)
            t.setField(i, 	  fetched_child1.getField(i));
        for (int i = 0; i < td2n; i++)
            t.setField(td1n+i,fetched_child2.getField(i));
        return t;
   	}
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if(listIt!=null&& listIt.hasNext())
        	return CombineTuple();
        while (child1.hasNext()) {
            fetched_child1=child1.next();
            
            ArrayList<Tuple> l=map.get(fetched_child1.getField(p.getField2()));
            if (l==null)
                continue;
            listIt=l.iterator();
            return CombineTuple();
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[]{this.child1,this.child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }
    
}
